=====
Usage
=====

The tool can be run in both in CLI-mode by calling qincm.exe or by usage in python.

Further documentation (in Dutch) is available in the memo below:

`De Jong, J. (2021) Quick Inland Navigation Cost Model (QINCoM) voor een snelle berekening van het effect van laagwater en maatregelen op kosten van de binnenvaartsector . Deltares memo 11205272-005-ZWS-0003, d.d. december 2021 v1.0 <https://pub.kennisbank.deltares.nl/Details/fullCatalogue/1000020684>`_

CLI
###

In CLI-mode is currently only available for scenario mode. This function requires the input of both discharges and occurances::

    qincm
          --route_depth_costs_file data\testmodel_4p\route_depth_costs.json
          --knelpunt_discharge_depth_file data\testmodel_4p\knelpunt_discharge_waterdepth.json
          --discharges [900,1000,1100,1200]
          --occurance [5,10,20,40]
          --mode scenario


Python
######

To use QINCM in a project. 

Initiate the model::

    import qincm
    from pathlib import Path


    inputdir = Path('data/testmodel_4p')
    route_depth_costs_file = inputdir / 'route_depth_costs.json'
    knelpunt_discharge_depth_file = inputdir / 'knelpunt_discharge_waterdepth.json'

    M = QINCM(
        route_depth_costs_file,
        knelpunt_discharge_depth_file,
        reference='WA_Nijmegen'
    )

Calculate costs per discharge::

    import numpy as np
    
    discharges = np.linspace(500, 3000, 26)
    M.costs_per_discharge(discharges)


Calculate for timeseries::

    import pandas as pd
    
    discharges = np.linspace(500, 3000, 365)
    dates = pd.date_range('2000-01-01', periods=len(discharges), freq='1D')

    timeseries = pd.Series(index=dates, data=discharges)

    M.costs_for_scenario(timeseries)

By default qincom assumes a underkeelclearance of 0.2 m on all locations. This can be changes with::

    qincm.ukc = 0.0


Input files
###########

QINCoM is heavily dependent on two input files.

The file *knelpunt_discharge_waterdepth.json* contains the relation between discharge and water depth for a list of bottleknecks ('knelpunten').
By default, applications of qincom assume a fixed discharge distribution and only request input at one location ("Reference", in these examples set at "BR_Duitsland").
The column discharge for each individual location is then not used. The model assumes a one-on-one relation of each row to the discharge at Lobith. In this example it assumes that a discharge at Lobith of 1020 m3/s corresponds to 830 m3/s at Nijmegen.::

    {
    "WA_Nijmegen": {
        "580.0": 1.725,
        "697.0": 2.012,
        "830.0": 2.393,
        "1120.0": 3.222,
        "1393.0": 3.951
    },
    "WA_St. Andries": {
            "538.0": 2.576,
            "654.0": 2.804,
            "787.0": 3.064,
            "1103.0": 3.755,
            "1390.0": 4.38
    },
    "BR_Duitsland": {
            "700.0": 9.0,
            "850.0": 9.0,
            "1020.0": 9.0,
            "1400.0": 9.0,
            "1800.0": 9.0
    },
    "IJ_Velp": {
            "110.0": 1.714,
            "136.0": 1.972,
            "168.0": 2.272,
            "251.0": 3.096,
            "319.0": 3.74
        }
    }

In the file *route_depth_costs.json* a cost function for each route is specified. 
A route is a unique combination of bottleknecks. 
The data in this file is generated by postprocessing a reference BIVAS simulation. 

The first column gives the available draft, the second column the cost function. 
Note that this does not necessary need to be a cost in euros, but might also be a different quanitification, like 'loss in cargo'.::
    {
        "{}":{
            "0.0":7535462.83,
            "0.1":7532043.72,
            "0.2":7527957.07,
            ...
            "9.8":2572643.73,
            "9.9":2572643.73,
            "10.0":2572643.73
        },
        "{IJ_Velp}":{
            "0.0":30252.21,
            "0.1":30221.86,
            "0.2":30191.68,
            ...
            "9.8":8455.15,
            "9.9":8455.15,
            "10.0":8455.15
        },
        ...
        "{WA_St. Andries, BR_Duitsland, WA_Nijmegen}":{
            "0.0":8251505.02,
            "0.1":8250728.75,
            "0.2":8249635.8,
            ...
            "9.8":2626653.79,
            "9.9":2626653.79,
            "10.0":2626653.79
        }
    }
	
Data sets
#########

In the /data a couple datasets are included that have been used in recent projects or for testing. These can be used for future projects.  The folder contains the following datasets:

* testmodel_4p: Test model with 4 bottlenecks as described in De Jong (2021). Produced by notebooks/0_preprocessing/QINCM preprocessing_testmodel.ipynb
* testmodel_15p: Test model with 15 bottlenecks as described in De Jong (2021). Produced by notebooks/0_preprocessing/QINCM preprocessing_testmodel.ipynb
* application: Best available data set that describes the current system. It is based on results from Klimaatbestendige Netwerken. Most of the background (up to v0.5) is described in De Jong (2021). The latest additions (v0.6) is a correction to the 'tonnage feasible' code. Produced by notebooks/0_preprocessing/QINCM preprocessing_KBN.ipynb. This notebook also contains the track of the history.
* application_WLO2050H. Identical to application. But with cost functions based on WLO2050H shipping intensity.


The datasets produced by "QINCM preprocessing_KBN.ipynb" produce the following cost functions:

* Transportkosten (route_depth_costs.json): Toename kosten door toename variabele vaarkosten
* Vracht potentieel (route_depth_tonnage_potential.json): Ieder schip vaart met maximale capaciteit 
* Vervoerde vracht (route_depth_tonnage_feasible.json): Afname vervoerde vracht, als de lading nog minder dan 20% wordt meegenomen
* Reizen (route_depth_trips.json): Toename intensiteit
* Vracht reactie (route_depth_tonnage.json): Aangenomen dat huidige reizen gelijk blijven, hoeveel neemt de vracht dan af
